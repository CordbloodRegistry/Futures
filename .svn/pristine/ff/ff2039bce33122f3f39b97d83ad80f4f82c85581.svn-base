//
//  cbrContactsAddViewController.m
//  fieldMobile
//
//  Created by Hai Tran on 2/12/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#import "cbrContactsAddViewController.h"

@implementation cbrContactsAddViewController
@synthesize status = _status;

@synthesize detailItem = _detailItem;
@synthesize firstName = _firstName;
@synthesize lastName = _lastName;
@synthesize email = _email;
@synthesize role = _role;

- (void)setDetailItem:(id)newDetailItem
{
    if (_detailItem != newDetailItem) {
        _detailItem = newDetailItem;
    }
}

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)didReceiveMemoryWarning
{
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc that aren't in use.
}

#pragma mark - View lifecycle
- (void)viewDidLoad {
    [super viewDidLoad];
    if (self.detailItem != nil) {
        NSString *entityName = [[self.detailItem entity] name];
        if ([entityName isEqualToString:@"Contacts"]) {	
            self.firstName.text = [self.detailItem valueForKey:@"firstName"];
            self.lastName.text =  [self.detailItem valueForKey:@"lastName"];
            self.email.text =  [self.detailItem valueForKey:@"email"];
            self.role.text =  [self.detailItem valueForKey:@"role"];
            if ([[self.detailItem valueForKey:@"status"] isEqualToString:@"Active"])
            {
                [self.status setOn:YES];
            }
            else {
                [self.status setOn:NO];
            }
        }
    }
}
- (void)viewDidUnload
{
    [self setFirstName:nil];
    [self setLastName:nil];
    [self setEmail:nil];
    [self setRole:nil];
    [self setStatus:nil];
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

- (BOOL)textFieldShouldReturn:(UITextField *)theTextField {
    if (theTextField == self.firstName || theTextField == self.lastName || theTextField == self.email || theTextField == self.role ){
        [theTextField resignFirstResponder];
    }
    return NO;
}

- (IBAction)cancelRecord:(id)sender {
        [self dismissModalViewControllerAnimated:YES];
}

- (IBAction)saveRecord:(id)sender {
    
    NSString *errorMsg = @"";
    if ([self.email.text length] > 0)
    {
        self.email.text = [self.email.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];        
        NSError *error = NULL;
        NSString *expression = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
        NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:expression options:NSRegularExpressionCaseInsensitive error:&error];
        
        NSTextCheckingResult *match = [regex firstMatchInString:self.email.text options:0 range:NSMakeRange(0, [self.email.text length])];
        
        if (!match){
            errorMsg = [NSString stringWithFormat:@"%@%@\n",errorMsg,@"Valid Email is required"];
        }
        
    }
    
    if ([errorMsg length] > 0)
    {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error" message:errorMsg  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
    }
    else
    {
    NSManagedObjectContext *context = [self.detailItem managedObjectContext];
    
    if ([[[self.detailItem entity] name] isEqualToString:@"Contacts"])
    {
        [self.detailItem setValue:self.firstName.text forKey:@"firstName"];
        [self.detailItem setValue:self.lastName.text forKey:@"lastName"];
        [self.detailItem setValue:self.email.text forKey:@"email"];
        [self.detailItem setValue:self.role.text forKey:@"role"];
        if (self.status.isOn) {
            [self.detailItem setValue:@"Active" forKey:@"status"];
        }
        else {
            [self.detailItem setValue:@"Inactive" forKey:@"status"];
        }
        // Save the context.
        NSError *error = nil;
        if (![context save:&error]) {
            /*
             Replace this implementation with code to handle the error appropriately.
             
             abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. 
             */
            NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
            abort();
        }
        [self recordTransaction:self.detailItem transactionType:@"Update"];
        
        [self.navigationController popViewControllerAnimated:YES];
        
    }
    else {
        NSManagedObject *newContact = [NSEntityDescription insertNewObjectForEntityForName:@"Contacts" inManagedObjectContext:context];
        [newContact setValue:self.firstName.text forKey:@"firstName"];
        [newContact setValue:self.lastName.text forKey:@"lastName"];
        [newContact setValue:self.email.text forKey:@"email"];
        [newContact setValue:self.role.text forKey:@"role"];
        [newContact setValue:[[NSString alloc] initWithFormat:@"%@", [[self.detailItem  valueForKey:@"rowId"] description]] forKey:
         @"officeId"];
        if (self.status.isOn) {
            [newContact setValue:@"Active" forKey:@"status"];
        }
        else {
            [newContact setValue:@"Inactive" forKey:@"status"];
        }
        //[newContact setValue:@"" forKey:@"rowId"];
        
        if (self.detailItem != nil) {
            NSString *relationshipName;
            NSString *entityName = [[self.detailItem entity] name];
            
            if ([entityName isEqualToString:@"Offices"]) {	
                relationshipName = @"officeContacts";
            }
            if ([entityName isEqualToString:@"Providers"]) {
                relationshipName = @"provContacts";
            }
            
            NSMutableSet *contactRelation = [[self detailItem] mutableSetValueForKey:relationshipName];
            [contactRelation addObject:newContact];
        }    
        
        // Save the context.
        NSError *error = nil;
        if (![context save:&error]) {
            /*
             Replace this implementation with code to handle the error appropriately.
             
             abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. 
             */
            NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
            abort();
        }
        [self recordTransaction:newContact transactionType:@"Create"];
    }
    [self dismissModalViewControllerAnimated:YES];
    }
}

- (void)recordTransaction:(NSManagedObject *)obj transactionType:(NSString *)sType 
{
    NSManagedObjectContext *context = [self.detailItem managedObjectContext];;
    NSManagedObject *newTransaction = [NSEntityDescription insertNewObjectForEntityForName:@"Transactions" inManagedObjectContext:context];
    
    NSDate *today = [NSDate date];
    
    //current location
    CLLocationManager *clm = [[CLLocationManager alloc] init];
    
    //self.locationManager.delegate = self;
    clm.desiredAccuracy = kCLLocationAccuracyBestForNavigation;
    
    // Set a movement threshold for new events.
    clm.distanceFilter = 500;
    
    [clm startUpdatingLocation];
    
    CLLocation *myLocation = [clm location];
    
    [newTransaction setValue:@"Contact" forKey:@"entityType"];
    [newTransaction setValue:[NSNumber numberWithFloat:myLocation.coordinate.latitude] forKey:@"latitude"];
    [newTransaction setValue:[NSNumber numberWithFloat:myLocation.coordinate.longitude] forKey:@"longitude"];
    [newTransaction setValue:today forKey:@"transactionDate"];
    [newTransaction setValue:sType forKey:@"transactionType"];
    
    [clm stopUpdatingLocation];
    
    
    NSMutableSet *transactionRelation = [obj mutableSetValueForKey:@"transactions"];
    [transactionRelation addObject:newTransaction];
    
    [context save:nil];
}

@end
